{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "description": "Resource schema for AWS::IoTTwinMaker::ComponentType",
  "definitions": {
    "DateTimeFormat": {
      "oneOf": [
        {
          "type": "string",
          "format": "date-time"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ]
    },
    "ParentComponentType": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "[a-zA-Z_\\.\\-0-9:]+"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ]
    },
    "PropertyName": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "[a-zA-Z_\\-0-9]+"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ]
    },
    "RequiredProperty": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "[a-zA-Z_\\-0-9]+"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ]
    },
    "LambdaFunction": {
      "type": "object",
      "properties": {
        "Arn": {
          "oneOf": [
            {
              "type": "string",
              "pattern": "arn:((aws)|(aws-cn)|(aws-us-gov)):lambda:[a-z0-9-]+:[0-9]{12}:function:[\\/a-zA-Z0-9_-]+",
              "minLength": 1,
              "maxLength": 128
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ]
        }
      },
      "additionalProperties": false,
      "required": [
        "Arn"
      ]
    },
    "DataConnector": {
      "description": "The data connector.",
      "type": "object",
      "properties": {
        "IsNative": {
          "description": "A Boolean value that specifies whether the data connector is native to IoT TwinMaker.",
          "type": "boolean"
        },
        "Lambda": {
          "description": "The Lambda function associated with this data connector.",
          "$ref": "#/definitions/LambdaFunction"
        }
      },
      "additionalProperties": false
    },
    "Function": {
      "description": "The function of component type.",
      "type": "object",
      "properties": {
        "ImplementedBy": {
          "description": "The data connector.",
          "$ref": "#/definitions/DataConnector"
        },
        "RequiredProperties": {
          "description": "The required properties of the function.",
          "type": "array",
          "minItems": 1,
          "maxItems": 256,
          "uniqueItems": true,
          "insertionOrder": false,
          "items": {
            "$ref": "#/definitions/RequiredProperty"
          }
        },
        "Scope": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "ENTITY",
                "WORKSPACE"
              ]
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The scope of the function."
        }
      },
      "additionalProperties": false
    },
    "DataValue": {
      "description": "An object that specifies a value for a property.",
      "type": "object",
      "properties": {
        "BooleanValue": {
          "description": "A Boolean value.",
          "type": "boolean"
        },
        "DoubleValue": {
          "description": "A double value.",
          "type": "number"
        },
        "Expression": {
          "oneOf": [
            {
              "type": "string",
              "pattern": "(^\\$\\{Parameters\\.[a-zA-z]+([a-zA-z_0-9]*)}$)",
              "minLength": 1,
              "maxLength": 316
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "An expression that produces the value."
        },
        "IntegerValue": {
          "description": "An integer value.",
          "type": "integer"
        },
        "ListValue": {
          "description": "A list of multiple values.",
          "type": "array",
          "minItems": 0,
          "maxItems": 50,
          "uniqueItems": false,
          "insertionOrder": false,
          "items": {
            "$ref": "#/definitions/DataValue"
          }
        },
        "LongValue": {
          "description": "A long value.",
          "type": "number"
        },
        "StringValue": {
          "oneOf": [
            {
              "type": "string",
              "pattern": ".*",
              "minLength": 1,
              "maxLength": 256
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "A string value."
        },
        "MapValue": {
          "description": "An object that maps strings to multiple DataValue objects. \n\n",
          "type": "object",
          "patternProperties": {
            "[a-zA-Z_\\-0-9]+": {
              "$ref": "#/definitions/DataValue"
            }
          },
          "additionalProperties": false
        },
        "RelationshipValue": {
          "description": "A value that relates a component to another component.",
          "type": "object",
          "properties": {
            "TargetComponentName": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "[a-zA-Z_\\-0-9]+",
                  "minLength": 1,
                  "maxLength": 256
                },
                {
                  "$ref": "../component/functions.json#/AwsFunctionString"
                }
              ]
            },
            "TargetEntityId": {
              "oneOf": [
                {
                  "type": "string",
                  "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
                  "minLength": 1,
                  "maxLength": 128
                },
                {
                  "$ref": "../component/functions.json#/AwsFunctionString"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "Relationship": {
      "description": "The type of the relationship.",
      "type": "object",
      "properties": {
        "RelationshipType": {
          "oneOf": [
            {
              "type": "string",
              "pattern": ".*",
              "minLength": 1,
              "maxLength": 256
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The type of the relationship."
        },
        "TargetComponentTypeId": {
          "oneOf": [
            {
              "type": "string",
              "pattern": "[a-zA-Z_\\.\\-0-9:]+",
              "minLength": 1,
              "maxLength": 256
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The ID of the target component type associated with this relationship."
        }
      },
      "additionalProperties": false
    },
    "DataType": {
      "description": "An object that specifies the data type of a property.",
      "type": "object",
      "properties": {
        "AllowedValues": {
          "description": "The allowed values for this data type.",
          "type": "array",
          "minItems": 0,
          "maxItems": 50,
          "uniqueItems": false,
          "insertionOrder": false,
          "items": {
            "$ref": "#/definitions/DataValue"
          }
        },
        "NestedType": {
          "description": "The nested type in the data type.",
          "$ref": "#/definitions/DataType"
        },
        "Relationship": {
          "description": "A relationship that associates a component with another component.",
          "$ref": "#/definitions/Relationship"
        },
        "Type": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "RELATIONSHIP",
                "STRING",
                "LONG",
                "BOOLEAN",
                "INTEGER",
                "DOUBLE",
                "LIST",
                "MAP"
              ]
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The underlying type of the data type."
        },
        "UnitOfMeasure": {
          "oneOf": [
            {
              "type": "string",
              "pattern": ".*",
              "minLength": 1,
              "maxLength": 256
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The unit of measure used in this data type."
        }
      },
      "additionalProperties": false,
      "required": [
        "Type"
      ]
    },
    "PropertyDefinition": {
      "description": "An object that sets information about a property.",
      "type": "object",
      "properties": {
        "Configurations": {
          "description": "An object that specifies information about a property.",
          "type": "object",
          "patternProperties": {
            "[a-zA-Z_\\-0-9]+": {
              "type": "string",
              "pattern": "[a-zA-Z_\\-0-9]+",
              "minLength": 1,
              "maxLength": 256
            }
          },
          "additionalProperties": false
        },
        "DataType": {
          "description": "An object that contains information about the data type.",
          "$ref": "#/definitions/DataType"
        },
        "DefaultValue": {
          "description": "An object that contains the default value.",
          "$ref": "#/definitions/DataValue"
        },
        "IsExternalId": {
          "description": "A Boolean value that specifies whether the property ID comes from an external data store.",
          "type": "boolean"
        },
        "IsRequiredInEntity": {
          "description": "A Boolean value that specifies whether the property is required.",
          "type": "boolean"
        },
        "IsStoredExternally": {
          "description": "A Boolean value that specifies whether the property is stored externally.",
          "type": "boolean"
        },
        "IsTimeSeries": {
          "description": "A Boolean value that specifies whether the property consists of time series data.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "PropertyGroup": {
      "description": "An object that sets information about a property group.",
      "type": "object",
      "properties": {
        "GroupType": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "TABULAR"
              ]
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The type of property group."
        },
        "PropertyNames": {
          "description": "The list of property names in the property group.",
          "type": "array",
          "minItems": 1,
          "maxItems": 256,
          "uniqueItems": true,
          "insertionOrder": false,
          "items": {
            "$ref": "#/definitions/PropertyName"
          }
        }
      },
      "additionalProperties": false
    },
    "CompositeComponentType": {
      "description": "An object that sets information about a composite component type.",
      "type": "object",
      "properties": {
        "ComponentTypeId": {
          "oneOf": [
            {
              "type": "string",
              "pattern": "[a-zA-Z_\\.\\-0-9:]+",
              "minLength": 1,
              "maxLength": 256
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The id of the composite component type."
        }
      },
      "additionalProperties": false
    },
    "Status": {
      "type": "object",
      "properties": {
        "State": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "CREATING",
                "UPDATING",
                "DELETING",
                "ACTIVE",
                "ERROR"
              ]
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ]
        },
        "Error": {
          "type": "object",
          "anyOf": [
            {
              "description": "Empty Error object.",
              "type": "object",
              "additionalProperties": false
            },
            {
              "description": "Error object with Message and Code.",
              "type": "object",
              "properties": {
                "Message": {
                  "type": "string",
                  "minLength": 0,
                  "maxLength": 2048
                },
                "Code": {
                  "type": "string",
                  "enum": [
                    "VALIDATION_ERROR",
                    "INTERNAL_FAILURE"
                  ]
                }
              },
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "WorkspaceId": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The ID of the workspace that contains the component type."
    },
    "ComponentTypeId": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 256,
          "pattern": "[a-zA-Z_\\.\\-0-9:]+"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The ID of the component type."
    },
    "Description": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 0,
          "maxLength": 512
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The description of the component type."
    },
    "ExtendsFrom": {
      "description": "Specifies the parent component type to extend.",
      "type": "array",
      "minItems": 1,
      "maxItems": 256,
      "uniqueItems": true,
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/ParentComponentType"
      }
    },
    "Functions": {
      "description": "a Map of functions in the component type. Each function's key must be unique to this map.",
      "type": "object",
      "additionalProperties": false,
      "patternProperties": {
        "[a-zA-Z_\\-0-9]+": {
          "$ref": "#/definitions/Function"
        }
      }
    },
    "IsSingleton": {
      "description": "A Boolean value that specifies whether an entity can have more than one component of this type.",
      "type": "boolean"
    },
    "PropertyDefinitions": {
      "description": "An map of the property definitions in the component type. Each property definition's key must be unique to this map.",
      "type": "object",
      "patternProperties": {
        "[a-zA-Z_\\-0-9]+": {
          "$ref": "#/definitions/PropertyDefinition"
        }
      },
      "additionalProperties": false
    },
    "PropertyGroups": {
      "description": "An map of the property groups in the component type. Each property group's key must be unique to this map.",
      "type": "object",
      "patternProperties": {
        "[a-zA-Z_\\-0-9]+": {
          "$ref": "#/definitions/PropertyGroup"
        }
      },
      "additionalProperties": false
    },
    "CompositeComponentTypes": {
      "description": "An map of the composite component types in the component type. Each composite component type's key must be unique to this map.",
      "type": "object",
      "patternProperties": {
        "[a-zA-Z_\\-0-9]+": {
          "$ref": "#/definitions/CompositeComponentType"
        }
      },
      "additionalProperties": false
    },
    "Arn": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 20,
          "maxLength": 2048,
          "pattern": "arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\\/a-zA-Z0-9_\\-\\.:]+"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The ARN of the component type."
    },
    "CreationDateTime": {
      "description": "The date and time when the component type was created.",
      "$ref": "#/definitions/DateTimeFormat"
    },
    "UpdateDateTime": {
      "description": "The last date and time when the component type was updated.",
      "$ref": "#/definitions/DateTimeFormat"
    },
    "Status": {
      "description": "The current status of the component type.",
      "$ref": "#/definitions/Status"
    },
    "IsAbstract": {
      "description": "A Boolean value that specifies whether the component type is abstract.",
      "type": "boolean"
    },
    "IsSchemaInitialized": {
      "description": "A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.",
      "type": "boolean"
    },
    "Tags": {
      "type": "object",
      "description": "A map of key-value pairs to associate with a resource.",
      "patternProperties": {
        "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$": {
          "type": "string",
          "minLength": 1,
          "maxLength": 256
        }
      },
      "maxProperties": 50,
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "required": [
    "WorkspaceId",
    "ComponentTypeId"
  ]
}