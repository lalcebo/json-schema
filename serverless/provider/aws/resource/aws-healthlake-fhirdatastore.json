{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "description": "HealthLake FHIR Datastore",
  "documentationUrl": "https://docs.aws.amazon.com/healthlake/latest/devguide/working-with-FHIR-healthlake.html",
  "definitions": {
    "CreatedAt": {
      "description": "The time that a Data Store was created.",
      "type": "object",
      "properties": {
        "Seconds": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "Seconds since epoch."
        },
        "Nanos": {
          "description": "Nanoseconds.",
          "type": "integer"
        }
      },
      "required": [
        "Seconds",
        "Nanos"
      ],
      "additionalProperties": false
    },
    "DatastoreArn": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?"
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The Amazon Resource Name used in the creation of the Data Store."
    },
    "DatastoreEndpoint": {
      "oneOf": [
        {
          "type": "string",
          "maxLength": 10000
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL."
    },
    "DatastoreId": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The AWS-generated ID number for the Data Store."
    },
    "DatastoreName": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 256
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The user-generated name for the Data Store."
    },
    "DatastoreStatus": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "CREATING",
            "ACTIVE",
            "DELETING",
            "DELETED"
          ]
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'."
    },
    "DatastoreTypeVersion": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "R4"
          ]
        },
        {
          "$ref": "../component/functions.json#/AwsFunctionString"
        }
      ],
      "description": "The FHIR version. Only R4 version data is supported."
    },
    "PreloadDataConfig": {
      "description": "The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.",
      "type": "object",
      "properties": {
        "PreloadDataType": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "SYNTHEA"
              ]
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The type of preloaded data. Only Synthea preloaded data is supported."
        }
      },
      "required": [
        "PreloadDataType"
      ],
      "additionalProperties": false
    },
    "SseConfiguration": {
      "description": "The server-side encryption key configuration for a customer provided encryption key.",
      "type": "object",
      "properties": {
        "KmsEncryptionConfig": {
          "$ref": "#/definitions/KmsEncryptionConfig"
        }
      },
      "required": [
        "KmsEncryptionConfig"
      ],
      "additionalProperties": false
    },
    "KmsEncryptionConfig": {
      "description": "The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.",
      "type": "object",
      "properties": {
        "CmkType": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "CUSTOMER_MANAGED_KMS_KEY",
                "AWS_OWNED_KMS_KEY"
              ]
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs."
        },
        "KmsKeyId": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1,
              "maxLength": 400,
              "pattern": "(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\\d:)?(\\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))"
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The KMS encryption key id/alias used to encrypt the Data Store contents at rest."
        }
      },
      "required": [
        "CmkType"
      ],
      "additionalProperties": false
    },
    "IdentityProviderConfiguration": {
      "description": "The identity provider configuration for the datastore",
      "type": "object",
      "properties": {
        "AuthorizationStrategy": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "SMART_ON_FHIR_V1",
                "AWS_AUTH"
              ]
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "Type of Authorization Strategy. The two types of supported Authorization strategies are SMART_ON_FHIR_V1 and AWS_AUTH."
        },
        "FineGrainedAuthorizationEnabled": {
          "description": "Flag to indicate if fine-grained authorization will be enabled for the datastore",
          "type": "boolean"
        },
        "Metadata": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The JSON metadata elements for identity provider configuration."
        },
        "IdpLambdaArn": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 49,
              "maxLength": 256,
              "pattern": "arn:aws[-a-z]*:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9\\-_\\.]+(:(\\$LATEST|[a-zA-Z0-9\\-_]+))?"
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The Amazon Resource Name (ARN) of the Lambda function that will be used to decode the access token created by the authorization server."
        }
      },
      "required": [
        "AuthorizationStrategy"
      ],
      "additionalProperties": false
    },
    "Tag": {
      "description": "A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.",
      "type": "object",
      "properties": {
        "Key": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1,
              "maxLength": 128
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The key of the tag."
        },
        "Value": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 0,
              "maxLength": 256
            },
            {
              "$ref": "../component/functions.json#/AwsFunctionString"
            }
          ],
          "description": "The value of the tag."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "additionalProperties": false
    }
  },
  "properties": {
    "CreatedAt": {
      "$ref": "#/definitions/CreatedAt"
    },
    "DatastoreArn": {
      "$ref": "#/definitions/DatastoreArn"
    },
    "DatastoreEndpoint": {
      "$ref": "#/definitions/DatastoreEndpoint"
    },
    "DatastoreId": {
      "$ref": "#/definitions/DatastoreId"
    },
    "DatastoreName": {
      "$ref": "#/definitions/DatastoreName"
    },
    "DatastoreStatus": {
      "$ref": "#/definitions/DatastoreStatus"
    },
    "DatastoreTypeVersion": {
      "$ref": "#/definitions/DatastoreTypeVersion"
    },
    "PreloadDataConfig": {
      "$ref": "#/definitions/PreloadDataConfig"
    },
    "SseConfiguration": {
      "$ref": "#/definitions/SseConfiguration"
    },
    "IdentityProviderConfiguration": {
      "$ref": "#/definitions/IdentityProviderConfiguration"
    },
    "Tags": {
      "type": "array",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/Tag"
      }
    }
  },
  "additionalProperties": false,
  "taggable": true,
  "required": [
    "DatastoreTypeVersion"
  ]
}