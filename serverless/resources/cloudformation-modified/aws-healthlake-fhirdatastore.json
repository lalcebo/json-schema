{
  "typeName": "AWS::HealthLake::FHIRDatastore",
  "description": "HealthLake FHIR Datastore. Source:- No source definition found, add manually please",
  "documentationUrl": "https://docs.aws.amazon.com/healthlake/latest/devguide/working-with-FHIR-healthlake.html",
  "definitions": {
    "CreatedAt": {
      "description": "The time that a Data Store was created.",
      "type": "object",
      "properties": {
        "Seconds": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
            }
          ],
          "description": "Seconds since epoch."
        },
        "Nanos": {
          "description": "Nanoseconds.",
          "type": "integer"
        }
      },
      "required": [
        "Seconds",
        "Nanos"
      ],
      "additionalProperties": false,
      "title": "CreatedAtDefinition"
    },
    "DatastoreArn": {
      "oneOf": [
        {
          "type": "string",
          "pattern": "^arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:healthlake:[a-zA-Z0-9-]+:[0-9]{12}:datastore/.+?"
        },
        {
          "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
        }
      ],
      "description": "The Amazon Resource Name used in the creation of the Data Store.",
      "title": "DatastoreArnDefinition"
    },
    "DatastoreEndpoint": {
      "oneOf": [
        {
          "type": "string",
          "maxLength": 10000
        },
        {
          "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
        }
      ],
      "description": "The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.",
      "title": "DatastoreEndpointDefinition"
    },
    "DatastoreId": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        {
          "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
        }
      ],
      "description": "The AWS-generated ID number for the Data Store.",
      "title": "DatastoreIdDefinition"
    },
    "DatastoreName": {
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "maxLength": 256
        },
        {
          "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
        }
      ],
      "description": "The user-generated name for the Data Store.",
      "title": "DatastoreNameDefinition"
    },
    "DatastoreStatus": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "CREATING",
            "ACTIVE",
            "DELETING",
            "DELETED"
          ]
        },
        {
          "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
        }
      ],
      "description": "The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.",
      "title": "DatastoreStatusDefinition"
    },
    "DatastoreTypeVersion": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "R4"
          ]
        },
        {
          "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
        }
      ],
      "description": "The FHIR version. Only R4 version data is supported.",
      "title": "DatastoreTypeVersionDefinition"
    },
    "PreloadDataConfig": {
      "description": "The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.",
      "type": "object",
      "properties": {
        "PreloadDataType": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "SYNTHEA"
              ]
            },
            {
              "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
            }
          ],
          "description": "The type of preloaded data. Only Synthea preloaded data is supported."
        }
      },
      "required": [
        "PreloadDataType"
      ],
      "additionalProperties": false,
      "title": "PreloadDataConfigDefinition"
    },
    "SseConfiguration": {
      "description": "The server-side encryption key configuration for a customer provided encryption key.",
      "type": "object",
      "properties": {
        "KmsEncryptionConfig": {
          "$ref": "#/definitions/KmsEncryptionConfig"
        }
      },
      "required": [
        "KmsEncryptionConfig"
      ],
      "additionalProperties": false,
      "title": "SseConfigurationDefinition"
    },
    "KmsEncryptionConfig": {
      "description": "The customer-managed-key (CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption.",
      "type": "object",
      "properties": {
        "CmkType": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "CUSTOMER_MANAGED_KMS_KEY",
                "AWS_OWNED_KMS_KEY"
              ]
            },
            {
              "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
            }
          ],
          "description": "The type of customer-managed-key (CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs."
        },
        "KmsKeyId": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1,
              "maxLength": 400,
              "pattern": "(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\\d:)?(\\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))"
            },
            {
              "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
            }
          ],
          "description": "The KMS encryption key id/alias used to encrypt the Data Store contents at rest."
        }
      },
      "required": [
        "CmkType"
      ],
      "additionalProperties": false,
      "title": "KmsEncryptionConfigDefinition"
    },
    "Tag": {
      "description": "A key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.",
      "type": "object",
      "properties": {
        "Key": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 1,
              "maxLength": 128
            },
            {
              "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
            }
          ],
          "description": "The key of the tag."
        },
        "Value": {
          "oneOf": [
            {
              "type": "string",
              "minLength": 0,
              "maxLength": 256
            },
            {
              "$ref": "../../components/cf.functions.json#/Aws_CF_FunctionString"
            }
          ],
          "description": "The value of the tag."
        }
      },
      "required": [
        "Key",
        "Value"
      ],
      "additionalProperties": false,
      "title": "TagDefinition"
    }
  },
  "properties": {
    "DatastoreName": {
      "$ref": "#/definitions/DatastoreName"
    },
    "DatastoreTypeVersion": {
      "$ref": "#/definitions/DatastoreTypeVersion"
    },
    "PreloadDataConfig": {
      "$ref": "#/definitions/PreloadDataConfig"
    },
    "SseConfiguration": {
      "$ref": "#/definitions/SseConfiguration"
    },
    "Tags": {
      "type": "array",
      "insertionOrder": false,
      "items": {
        "$ref": "#/definitions/Tag"
      }
    }
  },
  "additionalProperties": false,
  "taggable": true,
  "required": [
    "DatastoreTypeVersion"
  ],
  "readOnlyProperties": [
    "/properties/CreatedAt",
    "/properties/DatastoreArn",
    "/properties/DatastoreEndpoint",
    "/properties/DatastoreId",
    "/properties/DatastoreStatus"
  ],
  "primaryIdentifier": [
    "/properties/DatastoreId"
  ],
  "createOnlyProperties": [
    "/properties/DatastoreName",
    "/properties/DatastoreTypeVersion",
    "/properties/PreloadDataConfig",
    "/properties/SseConfiguration",
    "/properties/KmsEncryptionConfig"
  ],
  "handlers": {
    "create": {
      "permissions": [
        "healthlake:CreateFHIRDatastore",
        "healthlake:DescribeFHIRDatastore",
        "iam:PassRole",
        "kms:DescribeKey",
        "kms:CreateGrant",
        "kms:GenerateDataKey",
        "kms:Decrypt",
        "iam:GetRole",
        "iam:CreateServiceLinkedRole",
        "ram:GetResourceShareInvitations",
        "ram:AcceptResourceShareInvitation",
        "glue:CreateDatabase",
        "glue:DeleteDatabase"
      ]
    },
    "read": {
      "permissions": [
        "healthlake:DescribeFHIRDatastore",
        "healthlake:ListTagsForResource"
      ]
    },
    "update": {
      "permissions": [
        "healthlake:TagResource",
        "healthlake:UntagResource",
        "healthlake:ListTagsForResource",
        "iam:PassRole",
        "iam:GetRole",
        "iam:CreateServiceLinkedRole"
      ]
    },
    "delete": {
      "permissions": [
        "healthlake:DeleteFHIRDatastore",
        "healthlake:DescribeFHIRDatastore",
        "iam:PassRole",
        "iam:GetRole",
        "iam:CreateServiceLinkedRole",
        "ram:GetResourceShareInvitations",
        "ram:AcceptResourceShareInvitation",
        "glue:CreateDatabase",
        "glue:DeleteDatabase"
      ]
    },
    "list": {
      "permissions": [
        "healthlake:ListFHIRDatastores"
      ]
    }
  },
  "title": "AWSHealthLakeFHIRDatastoreProperties",
  "type": "object"
}